///////////////////////////////////////////////////////////
//  QikApplication.cs
//  Implementation of the Class QikApplication
//  Generated by Enterprise Architect
//  Created on:      02-May-2018 11:22
//  Original author: WDuma
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



using System;
namespace System {
	public class QikApplication : Interface1 {

		/// <summary>
		/// The VendingMachine class shall get user inputs from GUI for transaction type,
		/// the charging time, the money and shall perform these tasks: claming slots,
		/// charging, releasing slots, processing money, printing receipt,
		/// dispensing change, keeping track of which slots are available etc.
		/// </summary>
		public class VendingMachine {

			/// <summary>
			/// This class dispenses the change the user is supposed to receive when the money
			/// inserted is more than the money corresponding to the selected charging time.
			/// </summary>
			public class ChangeDispenser {

				public ChangeDispenser(){

				}

				~ChangeDispenser(){

				}

				/// <summary>
				/// Dispenses the change for the user.
				/// </summary>
				/// <param name="change"></param>
				public bool dispenseChange(int change){

					return false;
				}

			}//end ChangeDispenser

			/// <summary>
			/// This class prints the specified text for the user.
			/// </summary>
			public class Printer {

				public Printer(){

				}

				~Printer(){

				}

				/// <summary>
				/// Prints the text string for the user.
				/// </summary>
				/// <param name="PrintText"></param>
				public bool print(string PrintText){

					return false;
				}

			}//end Printer

			/// <summary>
			/// This class processes the money inserted by the user.
			/// </summary>
			public class MoneyMachine {

				public MoneyMachine(){

				}

				~MoneyMachine(){

				}

				/// <summary>
				/// checks if money is inserted and calculates how much has been inserted. Returns
				/// true if money has been inserted and false if not
				/// </summary>
				/// <param name="Money"></param>
				public bool getMoney(int Money){

					return false;
				}

			}//end MoneyMachine

			/// <summary>
			/// This class provides a means to store and retrieve the status of the
			/// VendingMachine and to log events to a log file.
			/// </summary>
			public class FileManager {

				/// <summary>
				/// URL/Filename of the file to log to.
				/// </summary>
				private File LogFile;
				/// <summary>
				/// URL/File name of the file to store the vending machine status to.
				/// </summary>
				private File StatusFile;



				~FileManager(){

				}

				public FileManager(){

				}

				/// <summary>
				/// Close the file with file descriptor Fd.
				/// </summary>
				/// <param name="Fd"></param>
				public bool close(int Fd){

					return false;
				}

				/// <summary>
				/// Retrieve the name of the Log file
				/// </summary>
				public bool logFileRetreive(){

					return false;
				}

				/// <summary>
				/// Write new log data to the log file
				/// </summary>
				public void logFileUpdate(){

				}

				/// <summary>
				/// Open the file.
				/// </summary>
				/// <param name="File"></param>
				public int open(string File){

					return 0;
				}

				/// <summary>
				/// Read the contents of the power up file (vending machine status file)
				/// </summary>
				public bool powerUpFileRetrieve(){

					return false;
				}

				/// <summary>
				/// Update the contents of the power up file (vending machine status file)
				/// </summary>
				public bool powerUpFileUpdate(){

					return false;
				}

				/// <summary>
				/// Read from the file descriptor and store lines in message.
				/// </summary>
				/// <param name="message"></param>
				/// <param name="Fd"></param>
				public int read(string message, int Fd){

					return 0;
				}

				/// <summary>
				/// Write data/text to the file.
				/// </summary>
				/// <param name="message"></param>
				/// <param name="Fd"></param>
				public bool write(string message, int Fd){

					return false;
				}

			}//end FileManager

			/// <summary>
			/// This class keeps track of the states for the charging slots and handles the
			/// call events from the VendingMachine class
			/// </summary>
			public class Slot {

				/// <summary>
				/// This class starts and stops changing the device in the slot.
				/// </summary>
				public class Charger {

					public Charger(){

					}

					~Charger(){

					}

					/// <summary>
					/// Reset status
					/// </summary>
					public void reset(){

					}

					/// <summary>
					/// Start charging.
					/// </summary>
					/// <param name="SlotID"></param>
					public bool startCharger(int SlotID){

						return false;
					}

					/// <summary>
					/// Stop charging.
					/// </summary>
					/// <param name="SlotID"></param>
					public bool stopCharger(int SlotID){

						return false;
					}

				}//end Charger

				/// <summary>
				/// The amount of time to charge for
				/// </summary>
				private int ChargingTime;
				/// <summary>
				/// Slot identifier
				/// </summary>
				private int ID;
				/// <summary>
				/// Password for retrieving device from slot
				/// </summary>
				private int Password;
				/// <summary>
				/// Current status: CHARGING, FINISHED_OCCUPIED, AVAILABLE
				/// </summary>
				private Enum Status;
				/// <summary>
				/// The elapsed charging time timer
				/// </summary>
				private Timer Timer;
				public System.QikApplication.VendingMachine.Slot.Charger m_Charger;

				public Slot(){

				}

				~Slot(){

				}

				/// <summary>
				/// close the slot door. (Current not implemented as it is not possible through the
				/// software.
				/// </summary>
				public int close(){

					return 0;
				}

				/// <summary>
				/// Retrieve the remaining charging time for the slot
				/// </summary>
				/// <param name="ChargeTime"></param>
				public int getChargeTime(int ChargeTime){

					return 0;
				}

				/// <summary>
				/// Retrieve the Slot Number for this slot
				/// </summary>
				public int getID(){

					return 0;
				}

				/// <summary>
				/// Retrieve the password for the slot for the current user.
				/// </summary>
				public int getPassword(){

					return 0;
				}

				/// <summary>
				/// Retrive the the status of this slot.
				/// </summary>
				public Enum getStatus(){

					return null;
				}

				/// <summary>
				/// Open the Slot for the user to insert or collect the device
				/// </summary>
				public int open(){

					return 0;
				}

				/// <summary>
				/// Resets Slot attributes to default values
				/// </summary>
				public void reset(){

				}

				/// <summary>
				/// Set the charge time for the slot
				/// </summary>
				public int setChargeTime(){

					return 0;
				}

				/// <summary>
				/// Set the password for the Slot for the current user
				/// </summary>
				/// <param name="Password"></param>
				public bool setPassword(int Password){

					return false;
				}

				/// <summary>
				/// Set the status of the slot: CHARGING, AVAILABLE etc.
				/// </summary>
				/// <param name="Status"></param>
				public int setStatus(Enum Status){

					return 0;
				}

				/// <summary>
				/// Start the charging timer
				/// </summary>
				public int startTimer(){

					return 0;
				}

				/// <summary>
				/// Stop the charging timer.
				/// </summary>
				public int stopTimer(){

					return 0;
				}

			}//end Slot

			/// <summary>
			/// Password administrator uses to access the application
			/// </summary>
			private string AdminPassword;
			/// <summary>
			/// Slots available for charging
			/// </summary>
			private AvailableSlots;
			/// <summary>
			/// Slots that are currently Busy charging
			/// </summary>
			private int BusySlots;
			/// <summary>
			/// Current page that is active for the user
			/// </summary>
			private Enum CurrentGUIpage;
			/// <summary>
			/// Current process within current page. eg WAITING_FOR_INPUT
			/// </summary>
			private Enum CurrentGUIpageState;
			/// <summary>
			/// User selected slot in which they will deposit their phone to be charge or from
			/// which they will retrieve their charged phone.
			/// </summary>
			private int currentSlot;
			/// <summary>
			/// Temporary variable that stores the password enter by the user.
			/// </summary>
			private int CurrentSlotPassword;
			/// <summary>
			/// Current time for logging purposes and perhaps also for user display
			/// </summary>
			private DateTime DateTime;
			/// <summary>
			/// Events that can be triggered to notify the VendingMachine class.
			/// </summary>
			private Event Event;
			/// <summary>
			/// Slots that are finished charging but have not been relieved of the charging
			/// device.
			/// </summary>
			private int FinishedSlots;
			/// <summary>
			/// Current application mode: admin mode or normal mode
			/// </summary>
			private Enum Mode;
			/// <summary>
			/// Slots that have completed the charging of their devices for the specified
			/// charging time but the devices have not been emptied for over the penalty period.
			/// 
			/// </summary>
			private int OverdueSlots;
			/// <summary>
			/// Text to be printed out to receipt or screen
			/// </summary>
			private string printText;
			public System.QikApplication.VendingMachine.Printer m_Printer;
			public System.QikApplication.VendingMachine.Slot m_Slot;
			public System.QikApplication.VendingMachine.ChangeDispenser m_ChangeDispenser;
			public System.QikApplication.VendingMachine.MoneyMachine m_MoneyMachine;
			public System.QikApplication.VendingMachine.FileManager m_FileManager;

			public VendingMachine(){

			}

			~VendingMachine(){

			}

			/// <summary>
			/// Administrator operation mode. This mode is for administrator to debug and
			/// modify the hardware.
			/// </summary>
			public void adminMode(){

			}

			/// <summary>
			/// Initiates charging process.
			/// </summary>
			public bool charge(){

				return false;
			}

			/// <summary>
			/// Allocates the selected slot to the current user if it is available
			/// </summary>
			public bool claimSlot(){

				return false;
			}

			/// <summary>
			/// Called after the processPayment() method when the money inserted was higher
			/// than the money required
			/// </summary>
			public bool dispenseChange(){

				return false;
			}

			/// <summary>
			/// Generates a random password
			/// </summary>
			public bool generatePassword(){

				return false;
			}

			/// <summary>
			/// Generates the text to be printed to screen or receipt
			/// </summary>
			public bool generatePrintText(){

				return false;
			}

			/// <summary>
			/// Retrieve current mode
			/// </summary>
			public Enum getMode(){

				return null;
			}

			/// <summary>
			/// log events to a file. This is for debugging.
			/// </summary>
			public bool logEvent(){

				return false;
			}

			/// <summary>
			/// Normal operation mode. This mode is for user operation.
			/// </summary>
			public void normalMode(){

			}

			/// <summary>
			/// Powers up the hardware and places it in a default state.
			/// </summary>
			public void powerUp(){

			}

			/// <summary>
			/// Called after the password has been entered and the money has been inserted and
			/// the change has been dispensed. The receipt shall contain information about the
			/// slot allocated for charging, the charging time, the time at which the payment
			/// was made, the time at which the penalty will begin  and the password for
			/// retrieving the device.
			/// </summary>
			/// <param name="printText"></param>
			public bool printReceipt(string printText){

				return false;
			}

			/// <summary>
			/// Process the user entered Password. Check the validity of the password against
			/// the Slot's password
			/// </summary>
			/// <param name="PassWord"></param>
			/// <param name="Slot"></param>
			public bool processPassword(int PassWord, Slot Slot){

				return false;
			}

			/// <summary>
			/// Process the inserted money and continue with dispensing change and opening the
			/// charging slot if the money is correct, otherwise halt until the user has
			/// inserted the correct money.
			/// </summary>
			public bool processPayment(){

				return false;
			}

			/// <summary>
			/// process the Timers for the different slots. This is to determine which slots
			/// have an elapsed charging period.
			/// </summary>
			public bool processTimers(){

				return false;
			}

			/// <summary>
			/// Reset the states and modes of the application.
			/// </summary>
			public void reset(){

			}

			/// <summary>
			/// Called when user has enter correct password to retrieve phone from slot
			/// </summary>
			/// <param name="Slot"></param>
			public void retreive(Slot Slot){

			}

			/// <summary>
			/// Display the ChargeTimePage
			/// </summary>
			public int showChargeTimePage(){

				return 0;
			}

			/// <summary>
			/// Display the PasswordGenerationPage
			/// </summary>
			public int showPasswordGenerationPage(){

				return 0;
			}

			/// <summary>
			/// Show the PaymentPage
			/// </summary>
			public int showPaymentPage(){

				return 0;
			}

			/// <summary>
			/// Show the SlotRetrievingPage
			/// </summary>
			public int showSlotRetrievingPage(){

				return 0;
			}

			/// <summary>
			/// Show the StartPage
			/// </summary>
			public int showStartPage(){

				return 0;
			}

			/// <summary>
			/// Store the user entered charging time
			/// </summary>
			/// <param name="Slot"></param>
			/// <param name="ChargeTime"></param>
			public bool storeChargeTime(Slot Slot, time ChargeTime){

				return false;
			}

			/// <summary>
			/// Store the user entered password
			/// </summary>
			/// <param name="Slot"></param>
			/// <param name="Password"></param>
			public bool storeSlotPassword(Slot Slot, int Password){

				return false;
			}

			/// <summary>
			/// Stores the status of the various slots. This is so that if there is a power
			/// down or some malfunction, the system can restore itself to this state.
			/// </summary>
			public bool storeStatus(){

				return false;
			}

			/// <summary>
			/// Updates the sates of the SLots and the AvailableSlots and BusySlots variables.
			/// </summary>
			public bool update(){

				return false;
			}

			/// <summary>
			/// Show user the status of the payment process.
			/// </summary>
			public int updatePaymentStatus(){

				return 0;
			}

		}//end VendingMachine

		public Interface1 m_Interface1;
		public System.QikApplication.VendingMachine m_VendingMachine;

		public QikApplication(){

		}

		~QikApplication(){

		}

	}//end QikApplication

}//end namespace System